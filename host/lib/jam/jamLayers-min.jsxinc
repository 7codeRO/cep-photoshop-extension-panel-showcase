// jamLayers.jsxinc v4.5 (minified)
if(typeof jamLayers!=='object') {var jamLayers={};(function() {function getObjectClass(object) {return(jamEngine.parseCompact(object))[0];} function toBlackAndWhite(desc) {function restoreDesc(desc) {var restoredDesc={};for(var key in desc) {if(desc.hasOwnProperty(key)) {var value=desc[key];var typedValue=null;switch(key) {case"using":typedValue=["<path>",value];break;case"useTint":typedValue=["<boolean>",value];break;case"blue":case"cyan":case"green":case"magenta":case"red":case"yellow":typedValue=["<integer>",value];break;case"tintColor":typedValue=jamHelpers.toColorObject(value);break;} if(typedValue) {restoredDesc[key]=typedValue;}}} return restoredDesc;} return restoreDesc(desc);} function toBrightnessContrast(desc) {function restoreDesc(desc) {var restoredDesc={};for(var key in desc) {if(desc.hasOwnProperty(key)) {var value=desc[key];var typedValue=null;switch(key) {case"useLegacy":typedValue=["<boolean>",value];break;case"brightness":case"contrast":typedValue=["<integer>",value];break;} if(typedValue) {restoredDesc[key]=typedValue;}}} return restoredDesc;} return restoreDesc(desc);} function toChannelMixer(desc) {function restoreDesc(desc,hintData) {var restoredDesc={};for(var key in desc) {if(desc.hasOwnProperty(key)) {var value=desc[key];var typedValue=null;switch(key) {case"using":typedValue=["<path>",value];break;case"monochromatic":typedValue=["<boolean>",value];break;case"black":case"blue":case"cyan":case"green":case"magenta":case"red":case"yellowColor":if(hintData) {typedValue=["<unitDouble>",[hintData,value]];} else {typedValue=["<object>",["channelMatrix",restoreDesc(value,"percentUnit")]];} break;case"gray":typedValue=["<object>",["channelMatrix",restoreDesc(value,"percentUnit")]];break;case"constant":typedValue=["<unitDouble>",[hintData,value]];break;} if(typedValue) {restoredDesc[key]=typedValue;}}} return restoredDesc;} return restoreDesc(desc);} function toColorBalance(desc) {function restoreDesc(desc) {var restoredDesc={};for(var key in desc) {if(desc.hasOwnProperty(key)) {var value=desc[key];var typedValue=null;var restoredList;switch(key) {case"preserveLuminosity":typedValue=["<boolean>",value];break;case"shadowLevels":case"midtoneLevels":case"highlightLevels":restoredList=[];for(var i=0;i<value.length;i++) {restoredList.push(["<integer>",value[i]]);} typedValue=["<list>",restoredList];break;} if(typedValue) {restoredDesc[key]=typedValue;}}} return restoredDesc;} return restoreDesc(desc);} function toCurves(desc) {function restoreDesc(desc) {var restoredDesc={};for(var key in desc) {if(desc.hasOwnProperty(key)) {var value=desc[key];var typedValue=null;var restoredList;switch(key) {case"using":typedValue=["<path>",value];break;case"horizontal":case"vertical":typedValue=["<double>",value];break;case"adjustment":restoredList=[];for(var i=0;i<value.length;i++) {restoredList.push(["<object>",["curvesAdjustment",restoreDesc(value[i])]]);} typedValue=["<list>",restoredList];break;case"curve":restoredList=[];for(var i=0;i<value.length;i++) {restoredList.push(["<object>",["point",restoreDesc(value[i])]]);} typedValue=["<list>",restoredList];break;case"mapping":restoredList=[];for(var i=0;i<value.length;i++) {restoredList.push(["<integer>",value[i]]);} typedValue=["<list>",restoredList];break;case"channel":typedValue=["<reference>",[["channel",["<enumerated>",["channel",value]]]]];break;} if(typedValue) {restoredDesc[key]=typedValue;}}} return restoredDesc;} return restoreDesc(desc);} function toExposure(desc) {function restoreDesc(desc) {var restoredDesc={};for(var key in desc) {if(desc.hasOwnProperty(key)) {var value=desc[key];var typedValue=null;switch(key) {case"using":typedValue=["<path>",value];break;case"exposure":case"gammaCorrection":case"offset":typedValue=["<double>",value];break;} if(typedValue) {restoredDesc[key]=typedValue;}}} return restoredDesc;} return restoreDesc(desc);} function toGradientMap(desc) {function restoreDesc(desc) {var restoredDesc={};for(var key in desc) {if(desc.hasOwnProperty(key)) {var value=desc[key];var typedValue=null;switch(key) {case"dither":case"reverse":typedValue=["<boolean>",value];break;case"gradient":typedValue=jamHelpers.toGradientObject(value);break;} if(typedValue) {restoredDesc[key]=typedValue;}}} return restoredDesc;} return restoreDesc(desc);} function toHueSaturation(desc) {function restoreDesc(desc) {var restoredDesc={};for(var key in desc) {if(desc.hasOwnProperty(key)) {var value=desc[key];var typedValue=null;var restoredList;switch(key) {case"using":typedValue=["<path>",value];break;case"colorize":typedValue=["<boolean>",value];break;case"beginRamp":case"beginSustain":case"endRamp":case"endSustain":case"hue":case"lightness":case"localRange":case"saturation":typedValue=["<integer>",value];break;case"adjustment":restoredList=[];for(var i=0;i<value.length;i++) {restoredList.push(["<object>",["hueSatAdjustmentV2",restoreDesc(value[i])]]);} typedValue=["<list>",restoredList];break;case"channel":typedValue=["<reference>",[["channel",["<enumerated>",["channel",value]]]]];break;} if(typedValue) {restoredDesc[key]=typedValue;}}} return restoredDesc;} return restoreDesc(desc);} function toLevels(desc) {function restoreDesc(desc) {var restoredDesc={};for(var key in desc) {if(desc.hasOwnProperty(key)) {var value=desc[key];var typedValue=null;var restoredList;switch(key) {case"using":typedValue=["<path>",value];break;case"auto":case"autoBlackWhite":case"autoContrast":case"autoNeutrals":typedValue=["<boolean>",value];break;case"blackClip":case"gamma":case"whiteClip":typedValue=["<double>",value];break;case"input":case"output":restoredList=[];for(var i=0;i<value.length;i++) {restoredList.push(["<integer>",value[i]]);} typedValue=["<list>",restoredList];break;case"adjustment":restoredList=[];for(var i=0;i<value.length;i++) {restoredList.push(["<object>",["levelsAdjustment",restoreDesc(value[i])]]);} typedValue=["<list>",restoredList];break;case"channel":typedValue=["<reference>",[["channel",["<enumerated>",["channel",value]]]]];break;} if(typedValue) {restoredDesc[key]=typedValue;}}} return restoredDesc;} return restoreDesc(desc);} function toPhotoFilter(desc) {function restoreDesc(desc) {var restoredDesc={};for(var key in desc) {if(desc.hasOwnProperty(key)) {var value=desc[key];var typedValue=null;switch(key) {case"preserveLuminosity":typedValue=["<boolean>",value];break;case"density":typedValue=["<integer>",value];break;case"color":typedValue=jamHelpers.toColorObject(value);break;} if(typedValue) {restoredDesc[key]=typedValue;}}} return restoredDesc;} return restoreDesc(desc);} function toPosterize(desc) {function restoreDesc(desc) {var restoredDesc={};for(var key in desc) {if(desc.hasOwnProperty(key)) {var value=desc[key];var typedValue=null;switch(key) {case"levels":typedValue=["<integer>",value];break;} if(typedValue) {restoredDesc[key]=typedValue;}}} return restoredDesc;} return restoreDesc(desc);} function toSelectiveColor(desc) {function restoreDesc(desc) {var restoredDesc={};for(var key in desc) {if(desc.hasOwnProperty(key)) {var value=desc[key];var typedValue=null;var restoredList;switch(key) {case"using":typedValue=["<path>",value];break;case"colors":typedValue=["<enumerated>",["colors",value]];break;case"method":typedValue=["<enumerated>",["correctionMethod",value]];break;case"black":case"cyan":case"magenta":case"yellowColor":typedValue=["<unitDouble>",["percentUnit",value]];break;case"colorCorrection":restoredList=[];for(var i=0;i<value.length;i++) {restoredList.push(["<object>",["colorCorrection",restoreDesc(value[i])]]);} typedValue=["<list>",restoredList];break;} if(typedValue) {restoredDesc[key]=typedValue;}}} return restoredDesc;} return restoreDesc(desc);} function toThreshold(desc) {function restoreDesc(desc) {var restoredDesc={};for(var key in desc) {if(desc.hasOwnProperty(key)) {var value=desc[key];var typedValue=null;switch(key) {case"level":typedValue=["<integer>",value];break;} if(typedValue) {restoredDesc[key]=typedValue;}}} return restoredDesc;} return restoreDesc(desc);} function toVibrance(desc) {function restoreDesc(desc) {var restoredDesc={};for(var key in desc) {if(desc.hasOwnProperty(key)) {var value=desc[key];var typedValue=null;switch(key) {case"vibrance":case"saturation":typedValue=["<integer>",value];break;} if(typedValue) {restoredDesc[key]=typedValue;}}} return restoredDesc;} return restoreDesc(desc);} function toGradient(desc) {function restoreDesc(desc,hintData) {var restoredDesc={};for(var key in desc) {if(desc.hasOwnProperty(key)) {var value=desc[key];var typedValue=null;switch(key) {case"align":case"dither":case"reverse":typedValue=["<boolean>",value];break;case"angle":typedValue=["<unitDouble>",["angleUnit",value]];break;case"scale":typedValue=["<unitDouble>",["percentUnit",value]];break;case"horizontal":case"vertical":typedValue=["<unitDouble>",[hintData,value]];break;case"offset":typedValue=["<object>",["point",restoreDesc(value,"percentUnit")]];break;case"type":typedValue=["<enumerated>",["gradientType",value]];break;case"gradient":typedValue=jamHelpers.toGradientObject(value);break;} if(typedValue) {restoredDesc[key]=typedValue;}}} return restoredDesc;} return restoreDesc(desc);} function toPattern(desc) {function restoreDesc(desc,hintData) {var restoredDesc={};for(var key in desc) {if(desc.hasOwnProperty(key)) {var value=desc[key];var typedValue=null;switch(key) {case"align":typedValue=["<boolean>",value];break;case"ID":case"name":typedValue=["<string>",value];break;case"scale":typedValue=["<unitDouble>",["percentUnit",value]];break;case"horizontal":case"vertical":typedValue=["<double>",value];break;case"phase":typedValue=["<object>",["point",restoreDesc(value)]];break;case"pattern":typedValue=["<object>",["pattern",restoreDesc(value)]];break;} if(typedValue) {restoredDesc[key]=typedValue;}}} return restoredDesc;} return restoreDesc(desc);} function toSolidColor(desc) {function restoreDesc(desc) {var restoredDesc={};for(var key in desc) {if(desc.hasOwnProperty(key)) {var value=desc[key];var typedValue=null;switch(key) {case"color":typedValue=jamHelpers.toColorObject(value);break;} if(typedValue) {restoredDesc[key]=typedValue;}}} return restoredDesc;} return restoreDesc(desc);} jamLayers.toLayerTypeObject=function(layerType) {var result=null;var typeArr=jamEngine.parseCompact(layerType);var kind=typeArr[0];var desc=typeArr[1];var toAdjustmentFunctions={"blackAndWhite":toBlackAndWhite,"brightnessContrast":toBrightnessContrast,"channelMixer":toChannelMixer,"colorBalance":toColorBalance,"curves":toCurves,"exposure":toExposure,"gradientMapClass":toGradientMap,"hueSaturation":toHueSaturation,"invert":null,"levels":toLevels,"photoFilter":toPhotoFilter,"posterize":toPosterize,"selectiveColor":toSelectiveColor,"thresholdClassEvent":toThreshold,"vibrance":toVibrance,"gradientLayer":toGradient,"patternLayer":toPattern,"solidColorLayer":toSolidColor};if(kind in toAdjustmentFunctions) {result=(desc)?["<object>",[kind,(toAdjustmentFunctions[kind])(desc)]]:["<class>",kind];} return result;};jamLayers.toLayerObject=function(layer) {var that=this;function restoreDesc(desc) {var restoredDesc={};for(var key in desc) {if(desc.hasOwnProperty(key)) {var value=desc[key];var typedValue=null;var restoredList;switch(key) {case"group":case"blendClipped":case"blendInterior":case"fillNeutral":case"layerMaskAsGlobalMask":case"protectAll":case"protectComposite":case"protectPosition":case"protectTransparency":case"transparencyShapesLayer":case"vectorMaskAsGlobalMask":typedValue=["<boolean>",value];break;case"name":typedValue=["<string>",value];break;case"srcBlackMin":case"srcBlackMax":case"srcWhiteMin":case"srcWhiteMax":case"destBlackMin":case"destBlackMax":case"destWhiteMin":case"destWhiteMax":typedValue=["<integer>",value];break;case"fillOpacity":case"opacity":case"userMaskDensity":case"vectorMaskDensity":typedValue=["<unitDouble>",["percentUnit",value]];break;case"userMaskFeather":case"vectorMaskFeather":typedValue=["<unitDouble>",["pixelsUnit",value]];break;case"mode":typedValue=["<enumerated>",["blendMode",value]];break;case"color":typedValue=["<enumerated>",["color",value]];break;case"knockout":typedValue=["<enumerated>",["knockout",value]];break;case"channel":typedValue=["<reference>",[["channel",["<enumerated>",["channel",value]]]]];break;case"layerLocking":typedValue=["<object>",["layerLocking",restoreDesc(value)]];break;case"blendRange":restoredList=[];for(var i=0;i<value.length;i++) {restoredList.push(["<object>",["blendRange",restoreDesc(value[i])]]);} typedValue=["<list>",restoredList];break;case"channelRestrictions":restoredList=[];for(var i=0;i<value.length;i++) {restoredList.push(["<enumerated>",["channel",value[i]]]);} typedValue=["<list>",restoredList];break;case"type":typedValue=that.toLayerTypeObject(value);break;} if(typedValue) {restoredDesc[key]=typedValue;}}} return restoredDesc;} var layerClass=getObjectClass(layer);return["<object>",[layerClass,restoreDesc(layer[layerClass])]];};jamLayers.fromLayerObject=function(layerObject) {var layer={};function layerHook(desc,key,getDefaultValue) {var replacedValue=undefined;switch(key) {case"layerObject":case"type":if(desc[key][0]==="<object>") {replacedValue={};replacedValue[desc[key][1][0]]=getDefaultValue(desc,key);} else if(desc[key][0]==="<class>") {replacedValue={};replacedValue[desc[key][1]]=null;} break;case"channel":var value=getDefaultValue(desc,key);replacedValue=value[0]["channel"];break;} return replacedValue;} return jamEngine.simplifyObject(["<object>",["layerObject",{"layerObject":layerObject}]],layerHook)["layerObject"];};jamLayers.toLayerClassReference=function(layer) {return["<reference>",[[getObjectClass(layer),["<class>",null]]]];};jamLayers.makeLayer=function(layer,below) {var makeDesc={"target":this.toLayerClassReference(layer),"using":this.toLayerObject(layer)};if(below) {makeDesc["below"]=["<boolean>",below];} jamEngine.jsonPlay("make",makeDesc);};jamLayers.toLayerReference=function(layer) {return["<reference>",[[getObjectClass(layer),["<enumerated>",["ordinal","targetEnum"]]]]];};jamLayers.setLayerProperties=function(layerProperties) {var layer={"layer":layerProperties};var setDesc={"target":this.toLayerReference(layer),"to":this.toLayerObject(layer)};jamEngine.jsonPlay("set",setDesc);};jamLayers.toLayerTypeReference=function(layerType) {var layerTypeClasses={"blackAndWhite":"adjustmentLayer","brightnessContrast":"adjustmentLayer","channelMixer":"adjustmentLayer","colorBalance":"adjustmentLayer","curves":"adjustmentLayer","exposure":"adjustmentLayer","gradientMapClass":"adjustmentLayer","hueSaturation":"adjustmentLayer","invert":"adjustmentLayer","levels":"adjustmentLayer","photoFilter":"adjustmentLayer","posterize":"adjustmentLayer","selectiveColor":"adjustmentLayer","thresholdClassEvent":"adjustmentLayer","vibrance":"adjustmentLayer","gradientLayer":"contentLayer","patternLayer":"contentLayer","solidColorLayer":"contentLayer"};return["<reference>",[[layerTypeClasses[getObjectClass(layerType)],["<enumerated>",["ordinal","targetEnum"]]]]];};jamLayers.setLayerType=function(layerType) {var setDesc={"target":this.toLayerTypeReference(layerType),"to":this.toLayerTypeObject(layerType)};jamEngine.jsonPlay("set",setDesc);};jamLayers.groupLayer=function() {jamEngine.jsonPlay("groupEvent");};jamLayers.ungroupLayer=function() {jamEngine.jsonPlay("ungroup");};}());}
