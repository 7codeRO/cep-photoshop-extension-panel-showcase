// jamBooks.jsxinc v4.5.1 (minified)
if(typeof jamBooks!=='object') {var jamBooks={};(function() {jamBooks.isColorBookFile=function(file) {return(file.type==='8BCB')||file.name.match(/\.acb$/i);};jamBooks.dataFromColorBookFile=function(colorBookFile,actualComponents) {var file;if(typeof colorBookFile==='string') {file=new File(colorBookFile);} else if(colorBookFile instanceof File) {file=colorBookFile;} var colorBookData;if(file.open("r")) {try {file.encoding='BINARY';var magicNumber=file.read(4);if(magicNumber==='8BCB') {function readBEInt(file,byteCount) {var bytes=file.read(byteCount);var intValue=0;for(var index=0;index<byteCount;index++) {intValue=(intValue<<8)+bytes.charCodeAt(index);} return intValue;} function readUnicodeString(file) {var unicodeString="";var unicodeLength=readBEInt(file,4);for(var index=0;index<unicodeLength;index++) {var unicodeChar=readBEInt(file,2);if(unicodeChar!==0) {unicodeString+=String.fromCharCode(unicodeChar);}} return unicodeString;} var formatVersion=readBEInt(file,2);if(formatVersion===1) {var colorBook={};colorBook["bookID"]=readBEInt(file,2);colorBook["bookName"]=readUnicodeString(file);colorBook["colorNamePrefix"]=readUnicodeString(file);colorBook["colorNameSuffix"]=readUnicodeString(file);colorBook["bookDescription"]=readUnicodeString(file);var colorCount=readBEInt(file,2);colorBook["colorsPerPage"]=readBEInt(file,2);colorBook["keyColorIndex"]=readBEInt(file,2);var colorSpace=readBEInt(file,2);var colorSpaces=["RGB",null,"CMYK",null,null,null,null,"Lab"];if((colorSpace<0)||(colorSpace>colorSpaces.length)) {throw new Error("[jamBooks.dataFromColorBookFile] Invalid color space: "+colorSpace);} else {colorBook["colorSpace"]=colorSpaces[colorSpace];} var colors=[];for(var colorIndex=0;colorIndex<colorCount;colorIndex++) {var color={};color["colorName"]=readUnicodeString(file);color["colorKey"]=file.read(6);var components=file.read((colorSpace===2)?4:3);var componentArr=[];for(componentIndex=0;componentIndex<components.length;componentIndex++) {var componentValue=components.charCodeAt(componentIndex);if(actualComponents) {switch(colorSpace) {case 2:componentValue=(255-componentValue)/255*100;break;case 7:if(componentIndex>0) {componentValue-=128;} else {componentValue=componentValue/255*100;} break;}} componentArr.push(componentValue);} color[(actualComponents)?"actualComponents":"rawComponents"]=componentArr;colors.push(color);} colorBook["colors"]=colors;if(!file.eof) {colorBook["spotProcess"]=file.read(8);} colorBookData=colorBook;} else {throw new Error("[jamBooks.dataFromColorBookFile] Unrecognized format version: "+formatVersion);}} else {throw new Error("[jamBooks.dataFromColorBookFile] Unrecognized magic number: "+magicNumber);}} catch(e) {colorBookData=e.message;} finally {file.close();}} else {colorBookData="[jamBooks.dataFromColorBookFile] Cannot open file";} return colorBookData;};jamBooks.dataToColorBookFile=function(colorBookFile,colorBookData) {var file;if(typeof colorBookFile==='string') {file=new File(colorBookFile);} else if(colorBookFile instanceof File) {file=colorBookFile;} var result="";if(file.open('w','8BCB','8BIM')) {try {function writeBEInt(file,byteCount,intValue) {var bytes="";for(var index=0;index<byteCount;index++) {bytes=String.fromCharCode(intValue&0xFF)+bytes;intValue>>=8;} file.write(bytes);} function writeUnicodeString(file,unicodeString) {var unicodeLength=unicodeString.length;writeBEInt(file,4,unicodeLength);for(var index=0;index<unicodeLength;index++) {writeBEInt(file,2,unicodeString.charCodeAt(index));}} file.encoding="BINARY";file.write('8BCB');writeBEInt(file,2,1);writeBEInt(file,2,colorBookData["bookID"]);writeUnicodeString(file,colorBookData["bookName"]);writeUnicodeString(file,colorBookData["colorNamePrefix"]);writeUnicodeString(file,colorBookData["colorNameSuffix"]);writeUnicodeString(file,colorBookData["bookDescription"]);var colors=colorBookData["colors"];var colorCount=colors.length;writeBEInt(file,2,colorCount);writeBEInt(file,2,colorBookData["colorsPerPage"]);if("keyColorIndex"in colorBookData) {writeBEInt(file,2,colorBookData["keyColorIndex"]);} else if("keyColorPage"in colorBookData) {writeBEInt(file,2,colorBookData["keyColorPage"]);} var colorSpace=colorBookData["colorSpace"];var colorSpaces={"RGB":0,"CMYK":2,"Lab":7};if(colorSpace in colorSpaces) {writeBEInt(file,2,colorSpaces[colorSpace]);} else {throw new Error("[jamBooks.dataToColorBookFile] Invalid color space: "+jamJSON.stringify(colorSpace));} for(var colorIndex=0;colorIndex<colorCount;colorIndex++) {var color=colors[colorIndex];writeUnicodeString(file,color["colorName"]);var colorKey=color["colorKey"];if(colorKey.length===6) {file.write(colorKey);} else {throw new Error("[jamBooks.dataToColorBookFile] Invalid color key: "+jamJSON.stringify(colorKey));} if("actualComponents"in color) {var components=color["actualComponents"];for(componentIndex=0;componentIndex<components.length;componentIndex++) {var componentValue=components[componentIndex];switch(colorSpace) {case"CMYK":componentValue=255-Math.round(componentValue*255/100);break;case"Lab":if(componentIndex>0) {componentValue=Math.round(componentValue)+128;} else {componentValue=Math.round(componentValue*255/100);} break;case"RGB":componentValue=Math.round(componentValue);break;} file.write(String.fromCharCode(componentValue));}} else if("rawComponents"in color) {var components=color["rawComponents"];for(componentIndex=0;componentIndex<components.length;componentIndex++) {file.write(String.fromCharCode(components[componentIndex]));}} else if("components"in color) {var components=color["components"];for(componentIndex=0;componentIndex<components.length;componentIndex++) {file.write(String.fromCharCode(components[componentIndex]));}}} if("spotProcess"in colorBookData) {file.write(colorBookData["spotProcess"]);}} catch(e) {result=e.message;} finally {file.close();}} else {result="[jamBooks.dataToColorBookFile] Cannot open file";} return result;};jamBooks.getColorBookFileColors=function(colorBookFile,roundComponents) {var colorBookColors=null;var colorBookData=this.dataFromColorBookFile(colorBookFile,true);if(colorBookData!=='string') {colorBookColors={};colorBookColors["bookFile"]=File.decode(colorBookFile.name);colorBookColors["bookName"]=localize(colorBookData["bookName"]);colorBookColors["bookDescription"]=localize(colorBookData["bookDescription"]);var colorNamePrefix=localize(colorBookData["colorNamePrefix"]);var colorNameSuffix=localize(colorBookData["colorNameSuffix"]);var colorSpace=colorBookData["colorSpace"];var colors=colorBookData["colors"];bookColors=[];for(var i=0;i<colors.length;i++) {var bookColor={};var colorName=localize(colors[i]["colorName"]);if(colorName) {bookColor["name"]=colorNamePrefix+colorName+colorNameSuffix;var components=colors[i]["actualComponents"];var color={};switch(colorSpace) {case"CMYK":color["C"]=(roundComponents)?Math.round(components[0]):components[0];color["M"]=(roundComponents)?Math.round(components[1]):components[1];color["Y"]=(roundComponents)?Math.round(components[2]):components[2];color["K"]=(roundComponents)?Math.round(components[3]):components[3];break;case"Lab":color["L"]=(roundComponents)?Math.round(components[0]):components[0];color["a"]=components[1];color["b"]=components[2];break;case"RGB":color["R"]=components[0];color["G"]=components[1];color["B"]=components[2];break;} bookColor["color"]=color;bookColors.push(bookColor);}} colorBookColors["bookColors"]=bookColors;} return colorBookColors;};}());}
