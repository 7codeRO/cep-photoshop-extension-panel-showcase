var extensionPath = $.fileName.split('/').slice(0, -1).join('/') + '/';var docName = app.activeDocument.name;function scan() {    if(documents.length) {    }    currentStep = 1;    app.activeDocument.activeHistoryState = app.activeDocument.historyStates.getByName(docName);}function productsForWeb() {    if(documents.length) {    }    currentStep = 2;    app.activeDocument.activeHistoryState = app.activeDocument.historyStates.getByName(docName);}function productsForPrint() {    app.activeDocument.activeHistoryState = stateOnWebComplete;}/* Playback */function nextStep(type) {    // if(!documents.length) {    //    alert('No document open');    //    return;    // }    // if(!paths.patterns || !paths.samples ) {    //     alert('No paths specified');    //     return;    // }    var length = 0;    for (var i in steps[type]) {        if (steps[type].hasOwnProperty(i)) {            length++;        }    }    for(; currentStep <= length + 1; currentStep++) {        if(typeof steps[type][currentStep] === 'function') {            try {                var resultOfStep = steps[type][currentStep]();                if(resultOfStep === false) {                    break;                } else if (typeof resultOfStep === 'string') {                    sendMessageToClient(resultOfStep);                }            } catch(e) {                alert(currentStep + ': ' + e);                break;            }        } else if(typeof steps[type][currentStep] === 'string') {            handleStopMessages(steps[type][currentStep]);            sendMessageToClient(steps[type][currentStep]);            currentStep++;            break;        }    }}function stopAction() {    var desc = new ActionDescriptor ();    app.executeAction (app.stringIDToTypeID ("stop"), desc, DialogModes.NO);}function revertAction() {    inFileData = jamActions.dataFromActionsFile (actionsFilePath);    fromCommandIndex -= 2;    jamActions.setCommandHandler(executeCommand);    jamActions.traverseAction(inFileData.actionSet, actionLocator, fromCommandIndex, true);}function continueActionFile() {    inFileData = jamActions.dataFromActionsFile (actionsFilePath);    jamActions.setCommandHandler(executeCommand);    jamActions.traverseAction(inFileData.actionSet, actionLocator, fromCommandIndex, true);}function playAgainActionFile() {    inFileData = jamActions.dataFromActionsFile (actionsFilePath);    fromCommandIndex = 0;    jamActions.setCommandHandler(executeCommand);    jamActions.traverseAction(inFileData.actionSet, actionLocator, fromCommandIndex, true);}function playActionFile(actionsFilePath) {    inFileData = jamActions.dataFromActionsFile (actionsFilePath);    if (typeof inFileData === 'string') {        alert (inFileData + "\n" + "Actions file: “" + actionsFilePath + "”");    } else {        customOptions.allowContinue = true;        customOptions.stepByStep = true;        fromCommandIndex = 0;        jamActions.setCommandHandler(executeCommand);        jamActions.traverseAction(inFileData.actionSet, actionLocator, fromCommandIndex, true);    }}function toggleActionDialogs(hide) {    hideDialogMode = hide;}/* END Playback *///------------------------------------------------------------------------------function selectAction(actionPath) {    actionsFilePath = actionPath;    playActionFile(actionsFilePath);}function loadPatterns() {    var inputFolder = new Folder(paths.loading.patterns);    var fileandfolderAr = scanSubFolders(inputFolder,/\.(pat|)$/i);    var fileList = fileandfolderAr[0];    for(var i=0; i<fileList.length; i++) {        fileList[i] = decodeURIComponent(fileList[i]);        loadNewAppFile(fileList[i]);    }    var event = new CSXSEvent();    event.type = "displayPatterns";    event.data = fileList;    event.dispatch();}function loadActions() {    var inputFolder = new Folder(paths.loading.actions);    var fileandfolderAr = scanSubFolders(inputFolder,/\.(atn|)$/i);    var fileList = fileandfolderAr[0];    for(var i=0; i<fileList.length; i++) {        fileList[i] = decodeURIComponent(fileList[i]);        loadNewAppFile(fileList[i]);    }    var event = new CSXSEvent();    event.type = "displayActions";    event.data = (fileList);    event.dispatch();}function selectPath(type){    var path = Folder.selectDialog();    paths.loading[type] = path;    switch(type) {        case 'actions':            loadActions();            break;        case 'patterns':            loadPatterns();            break;    }    var event = new CSXSEvent();    event.type = "selectedPath";    event.data = type + '::' + path;    event.dispatch();}function handleStopMessages(message) {    switch(message) {        case 'Make SELECTION':            selectTool('marqueeRectTool');            break;        case 'Select COLOR':            selectTool('eyedropperTool');            break;        case 'Fill METADATA':            var colorCode = app.foregroundColor.rgb.hexValue;            sendMetadataValueToClient('color_code', colorCode);            break;        case 'Select an ACTION':            stateOnWebComplete = app.activeDocument.activeHistoryState;            break;        default:    }}/* Metadata */function setFormMetadata(formObject){    metaData = formObject;    if (ExternalObject.AdobeXMPScript == undefined) ExternalObject.AdobeXMPScript = new ExternalObject("lib:AdobeXMPScript");    var xmp = new XMPMeta( app.activeDocument.xmpMetadata.rawData);    var myNamespace = "http://www.abelard.ro/";    var myPrefix = "kraleba:";    XMPMeta.registerNamespace(myNamespace, myPrefix);    for (var key in formObject) {        xmp.setProperty(myNamespace, key, formObject[key]);    }    app.activeDocument.xmpMetadata.rawData = xmp.serialize();}/* END Metadata */